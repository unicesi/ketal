/**
 * generated by Xtext 2.9.2
 */
package co.edu.icesi.eketal.eketal.impl;

import co.edu.icesi.eketal.eketal.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EketalFactoryImpl extends EFactoryImpl implements EketalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EketalFactory init()
  {
    try
    {
      EketalFactory theEketalFactory = (EketalFactory)EPackage.Registry.INSTANCE.getEFactory(EketalPackage.eNS_URI);
      if (theEketalFactory != null)
      {
        return theEketalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EketalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EketalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EketalPackage.MODEL: return createModel();
      case EketalPackage.EVENT_CLASS: return createEventClass();
      case EketalPackage.DECL: return createDecl();
      case EketalPackage.JVAR_D: return createJVarD();
      case EketalPackage.MSIG: return createMSig();
      case EketalPackage.EV_DECL: return createEvDecl();
      case EketalPackage.EVENT_EXPRESSION: return createEventExpression();
      case EketalPackage.EVENT_PREDICATE: return createEventPredicate();
      case EketalPackage.KIND_ATTRIBUTE: return createKindAttribute();
      case EketalPackage.TRIGGER: return createTrigger();
      case EketalPackage.GROUP: return createGroup();
      case EketalPackage.HOST: return createHost();
      case EketalPackage.AUTOMATON: return createAutomaton();
      case EketalPackage.STEP: return createStep();
      case EketalPackage.TRANS_DEF: return createTransDef();
      case EketalPackage.RC: return createRc();
      case EketalPackage.BODY: return createBody();
      case EketalPackage.OR_EVENT: return createOrEvent();
      case EketalPackage.AND_EVENT: return createAndEvent();
      case EketalPackage.UNARY_EVENT: return createUnaryEvent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EketalPackage.STATE_TYPE:
        return createStateTypeFromString(eDataType, initialValue);
      case EketalPackage.POS:
        return createPosFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EketalPackage.STATE_TYPE:
        return convertStateTypeToString(eDataType, instanceValue);
      case EketalPackage.POS:
        return convertPosToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventClass createEventClass()
  {
    EventClassImpl eventClass = new EventClassImpl();
    return eventClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Decl createDecl()
  {
    DeclImpl decl = new DeclImpl();
    return decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JVarD createJVarD()
  {
    JVarDImpl jVarD = new JVarDImpl();
    return jVarD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MSig createMSig()
  {
    MSigImpl mSig = new MSigImpl();
    return mSig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvDecl createEvDecl()
  {
    EvDeclImpl evDecl = new EvDeclImpl();
    return evDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventExpression createEventExpression()
  {
    EventExpressionImpl eventExpression = new EventExpressionImpl();
    return eventExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventPredicate createEventPredicate()
  {
    EventPredicateImpl eventPredicate = new EventPredicateImpl();
    return eventPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KindAttribute createKindAttribute()
  {
    KindAttributeImpl kindAttribute = new KindAttributeImpl();
    return kindAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Trigger createTrigger()
  {
    TriggerImpl trigger = new TriggerImpl();
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Group createGroup()
  {
    GroupImpl group = new GroupImpl();
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Host createHost()
  {
    HostImpl host = new HostImpl();
    return host;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Automaton createAutomaton()
  {
    AutomatonImpl automaton = new AutomatonImpl();
    return automaton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TransDef createTransDef()
  {
    TransDefImpl transDef = new TransDefImpl();
    return transDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rc createRc()
  {
    RcImpl rc = new RcImpl();
    return rc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrEvent createOrEvent()
  {
    OrEventImpl orEvent = new OrEventImpl();
    return orEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AndEvent createAndEvent()
  {
    AndEventImpl andEvent = new AndEventImpl();
    return andEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryEvent createUnaryEvent()
  {
    UnaryEventImpl unaryEvent = new UnaryEventImpl();
    return unaryEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateType createStateTypeFromString(EDataType eDataType, String initialValue)
  {
    StateType result = StateType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pos createPosFromString(EDataType eDataType, String initialValue)
  {
    Pos result = Pos.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPosToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EketalPackage getEketalPackage()
  {
    return (EketalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EketalPackage getPackage()
  {
    return EketalPackage.eINSTANCE;
  }

} //EketalFactoryImpl
