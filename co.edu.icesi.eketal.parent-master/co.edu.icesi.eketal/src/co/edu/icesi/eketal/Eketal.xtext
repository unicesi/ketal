grammar co.edu.icesi.eketal.Eketal with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate eketal "http://www.icesi.edu.co/eketal/Eketal"

//////////////////////////////////////////////////////////////////////////
/////////////////////////////Event Class//////////////////////////////////
//////////////////////////////////////////////////////////////////////////

Model:
	('package' name = QualifiedName ->';'?)?
	importSection = XImportSection?
	typeDeclaration = EventClass?//TODO por qué está con el ?
;

EventClass:
	'eventclass' name=ID '{' declarations+=Decl* '}'
;
	
Decl:
	Automaton
	| Rc
	| MSig
	| JVarD
	| Group
	| EvDecl
;

JVarD:
	name=ValidID ':' type=JvmTypeReference//Variable en java
;

MSig:
	'op' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':' type=JvmTypeReference)? 
		body=XBlockExpression
;

//////////////////////////////////////
//Event Declaration
//////////////////////////////////////

//TODO Acomodar al estilo aspectj
EvDecl:
	'event' name=ID'(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')'":"eventos+=OrEvent*';'
;

OrEvent returns EventExpression:
	AndEvent ({OrEvent.left=current} op='||' right=AndEvent)*
;

AndEvent returns EventExpression:
	NotEvent ({AndEvent.left=current} op='&&' right=NotEvent)*
;

NotEvent returns EventExpression:
	AtomEvent | UnaryExpresion
;

UnaryExpresion returns EventExpression:{UnaryEvent}
	op='!' expr=AtomEvent
	//{UnaryEvent} => op='!' expr=AtomEvent //TODO significado de =>
;

AtomEvent returns EventExpression:
	tipoEvento=EventPredicate | '('OrEvent')'
;

EventPredicate:
	KindAttribute
	| Trigger
;
	
KindAttribute:
	'host' '('hostgroup=[Group]')' //TODO deberia ser unico
	| 'on' '('ongroup=[Group]')' //TODO deberia ser unico
	| 'if' condition=XParenthesizedExpression
//	| 'eq'"("JExp","JExp")"
;

Trigger:
	'call''('esig=QualifiedName'('(params+=FullJvmFormalParameter 
		(',' params+=FullJvmFormalParameter)* )?')'')'//funciona 
;
	
Group:
	'group' name=ID
	'{' hosts+=Host* '}'
;
	
Host:
	ip=Ip
	| groupId=[Group]
;

Ip:
	"jphost" | "localhost" | Number':'Number
;

//////////////////////////////////////
////Automata definicion
//////////////////////////////////////
//TODO Tiene que haber una verificación de si, es un estado inicial (contiene la palabra start)
//debe tener transiciones, porque sino, no se puede llegar a ningún lado
//TODO Validación de que debe haber uno y solo un estado inicial
//TODO estado de finalización default
//TODO validacion: si es tipo estado end, no puede tener transiciones
//TODO Restricción de que solo puede haber un autómata
Automaton:
	'automaton' name=ID '('(params+=FullJvmFormalParameter 
        (',' params+=FullJvmFormalParameter)*)?')' '{' steps+=Step* '}'
;
        
Step:
	(type=StateType)? name=ID ( ':' '('transitions+=TransDef')' ('||' '('transitions+=TransDef* ')')? )? ';'
;

TransDef:
	event=[EvDecl] '->' target=[Step]//XExpression//estado muerto
;

enum StateType:
	state |
	start |
	end
;

//////////////////////////////////////
////Reaction definition
//////////////////////////////////////
Rc:
	(syncex="syncex")? 'reaction' pos=Pos name=ID '{' body=Body '}'
;

enum Pos:
	before | around | after
;

Body:
	body=XBlockExpression | 'addGroup' '('grupo=[Group]')' | 'removeGroup' '('grupo=[Group]')'
;
