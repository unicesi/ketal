/**
 * generated by Xtext 2.9.2
 */
package co.edu.icesi.eketal.jvmmodel;

import co.edu.icesi.eketal.eketal.Automaton;
import co.edu.icesi.eketal.eketal.Decl;
import co.edu.icesi.eketal.eketal.EvDecl;
import co.edu.icesi.eketal.eketal.EventClass;
import co.edu.icesi.eketal.eketal.Group;
import co.edu.icesi.eketal.eketal.Model;
import co.edu.icesi.eketal.eketal.StateType;
import co.edu.icesi.eketal.eketal.Step;
import co.edu.icesi.eketal.eketal.TransDef;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class EketalJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Model element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    String _name = element.getName();
    String _plus = ("Inferring model for " + _name);
    InputOutput.<String>println(_plus);
    String _name_1 = element.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    String _plus_1 = ("co.edu.icesi.ketal.automaton." + _firstUpper);
    JvmGenericType _class = this._jvmTypesBuilder.toClass(element, _plus_1);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      String _name_2 = element.getName();
      String _plus_2 = ("co.edu.icesi.ketal.automaton." + _name_2);
      InputOutput.<String>println(_plus_2);
      EventClass _typeDeclaration = element.getTypeDeclaration();
      EList<Decl> declaraciones = _typeDeclaration.getDeclarations();
      for (final Decl declaracion : declaraciones) {
        boolean _matched = false;
        if (!_matched) {
          if (declaracion instanceof Automaton) {
            _matched=true;
            EList<JvmMember> _members = it.getMembers();
            String _name_3 = ((Automaton)declaracion).getName();
            JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
            JvmField _field = this._jvmTypesBuilder.toField(declaracion, _name_3, _typeRef);
            this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
            EList<JvmMember> _members_1 = it.getMembers();
            final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
              StringConcatenationClient _client = new StringConcatenationClient() {
                @Override
                protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                  _builder.append("inicialize();");
                  _builder.newLine();
                }
              };
              this._jvmTypesBuilder.setBody(it_1, _client);
            };
            JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(declaracion, _function_1);
            this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
            EList<JvmMember> _members_2 = it.getMembers();
            JvmOperation _AutomatonInit = this.AutomatonInit(((Automaton)declaracion));
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _AutomatonInit);
          }
        }
        if (!_matched) {
          if (declaracion instanceof Group) {
            _matched=true;
          }
        }
      }
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  public JvmOperation AutomatonInit(final Automaton declaracion) {
    JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(void.class);
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      it.setVisibility(JvmVisibility.PRIVATE);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("Automaton automata = null;");
          _builder.newLine();
          _builder.append("//Relación evento caracter");
          _builder.newLine();
          String _canonicalName = Map.class.getCanonicalName();
          _builder.append(_canonicalName, "");
          _builder.append("<String, Character> mapping = new ");
          String _canonicalName_1 = TreeMap.class.getCanonicalName();
          _builder.append(_canonicalName_1, "");
          _builder.append("<String, Character>();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Estado inicial");
          _builder.newLine();
          _builder.append("co.edu.icesi.ketal.core.State inicial = null;");
          _builder.newLine();
          _builder.append("//lista de estados finales");
          _builder.newLine();
          String _canonicalName_2 = Set.class.getCanonicalName();
          _builder.append(_canonicalName_2, "");
          _builder.append("<co.edu.icesi.ketal.core.State> estadosFinales = new ");
          String _canonicalName_3 = HashSet.class.getCanonicalName();
          _builder.append(_canonicalName_3, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Conjunto de nombres y estados");
          _builder.newLine();
          String _canonicalName_4 = Map.class.getCanonicalName();
          _builder.append(_canonicalName_4, "");
          _builder.append("<String, co.edu.icesi.ketal.core.State> estados = new ");
          String _canonicalName_5 = HashMap.class.getCanonicalName();
          _builder.append(_canonicalName_5, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("//map de eventos con transiciones");
          _builder.newLine();
          String _canonicalName_6 = Map.class.getCanonicalName();
          _builder.append(_canonicalName_6, "");
          _builder.append("<co.edu.icesi.ketal.core.DefaultEqualsExpression, co.edu.icesi.ketal.core.Transition> eventos = new ");
          String _canonicalName_7 = HashMap.class.getCanonicalName();
          _builder.append(_canonicalName_7, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("int consecutivo = 0;");
          _builder.newLine();
          _builder.append("Character caracter = (char)consecutivo;");
          _builder.newLine();
          _builder.append("String nombreEvento = \"\";");
          _builder.newLine();
          _builder.append("String estadoLlegada = \"\";");
          _builder.newLine();
          _builder.newLine();
          {
            EList<Step> _steps = declaracion.getSteps();
            for(final Step step : _steps) {
              _builder.append("//Definición del estado: ");
              String _name = step.getName();
              _builder.append(_name, "");
              _builder.newLineIfNotEmpty();
              _builder.append("String estado");
              String _name_1 = step.getName();
              String _firstUpper = StringExtensions.toFirstUpper(_name_1);
              _builder.append(_firstUpper, "");
              _builder.append(" = \"");
              String _name_2 = step.getName();
              _builder.append(_name_2, "");
              _builder.append("\";");
              _builder.newLineIfNotEmpty();
              _builder.append("estados.put(estado");
              String _name_3 = step.getName();
              String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
              _builder.append(_firstUpper_1, "");
              _builder.append(", new co.edu.icesi.ketal.core.State());");
              _builder.newLineIfNotEmpty();
              {
                boolean _and = false;
                StateType _type = step.getType();
                boolean _notEquals = (!Objects.equal(_type, null));
                if (!_notEquals) {
                  _and = false;
                } else {
                  StateType _type_1 = step.getType();
                  boolean _equals = Objects.equal(_type_1, StateType.START);
                  _and = _equals;
                }
                if (_and) {
                  _builder.append("//");
                  StateType _type_2 = step.getType();
                  _builder.append(_type_2, "");
                  _builder.append(" ");
                  _builder.append(StateType.START, "");
                  _builder.append(" ");
                  _builder.append(StateType.START_VALUE, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("//Estado inicial: ");
                  String _name_4 = step.getName();
                  _builder.append(_name_4, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("inicial = estados.get(estado");
                  String _name_5 = step.getName();
                  String _firstUpper_2 = StringExtensions.toFirstUpper(_name_5);
                  _builder.append(_firstUpper_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.newLine();
              {
                boolean _and_1 = false;
                EList<TransDef> _transitions = step.getTransitions();
                boolean _isEmpty = _transitions.isEmpty();
                boolean _not = (!_isEmpty);
                if (!_not) {
                  _and_1 = false;
                } else {
                  StateType _type_3 = step.getType();
                  boolean _notEquals_1 = (!Objects.equal(_type_3, StateType.END));
                  _and_1 = _notEquals_1;
                }
                if (_and_1) {
                  {
                    EList<TransDef> _transitions_1 = step.getTransitions();
                    for(final TransDef transition : _transitions_1) {
                      _builder.append("//\"Transiciones de \" + ");
                      EvDecl _event = transition.getEvent();
                      String _name_6 = _event.getName();
                      _builder.append(_name_6, "");
                      _builder.append("+\" -> \"+");
                      Step _target = transition.getTarget();
                      String _name_7 = _target.getName();
                      _builder.append(_name_7, "");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("estadoLlegada = \"");
                      Step _target_1 = transition.getTarget();
                      String _name_8 = _target_1.getName();
                      _builder.append(_name_8, "\t");
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("if(!estados.containsKey(estadoLlegada)){");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("estados.put(estado");
                      String _name_9 = step.getName();
                      String _firstUpper_3 = StringExtensions.toFirstUpper(_name_9);
                      _builder.append(_firstUpper_3, "\t\t");
                      _builder.append(", new co.edu.icesi.ketal.core.State());");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("caracter = (char)consecutivo;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("consecutivo++;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("nombreEvento = \"");
                      EvDecl _event_1 = transition.getEvent();
                      String _name_10 = _event_1.getName();
                      _builder.append(_name_10, "\t");
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("mapping.put(nombreEvento, caracter);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("co.edu.icesi.ketal.core.Transition ");
                      String _name_11 = step.getName();
                      _builder.append(_name_11, "\t");
                      EvDecl _event_2 = transition.getEvent();
                      String _name_12 = _event_2.getName();
                      String _firstUpper_4 = StringExtensions.toFirstUpper(_name_12);
                      _builder.append(_firstUpper_4, "\t");
                      _builder.append(" = new co.edu.icesi.ketal.core.Transition(estados.get(estado");
                      String _name_13 = step.getName();
                      String _firstUpper_5 = StringExtensions.toFirstUpper(_name_13);
                      _builder.append(_firstUpper_5, "\t");
                      _builder.append("), estados.get(estadoLlegada), caracter);");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("eventos.put(new co.edu.icesi.ketal.core.DefaultEqualsExpression(new co.edu.icesi.ketal.core.NamedEvent(nombreEvento)), ");
                      String _name_14 = step.getName();
                      _builder.append(_name_14, "\t");
                      EvDecl _event_3 = transition.getEvent();
                      String _name_15 = _event_3.getName();
                      String _firstUpper_6 = StringExtensions.toFirstUpper(_name_15);
                      _builder.append(_firstUpper_6, "\t");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                } else {
                  _builder.append("//Estado final ");
                  String _name_16 = step.getName();
                  String _firstUpper_7 = StringExtensions.toFirstUpper(_name_16);
                  _builder.append(_firstUpper_7, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("estadosFinales.add(estados.get(estado");
                  String _name_17 = step.getName();
                  String _firstUpper_8 = StringExtensions.toFirstUpper(_name_17);
                  _builder.append(_firstUpper_8, "");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          String _canonicalName_8 = TreeSet.class.getCanonicalName();
          _builder.append(_canonicalName_8, "");
          _builder.append(" transitionSet = new ");
          String _canonicalName_9 = TreeSet.class.getCanonicalName();
          _builder.append(_canonicalName_9, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("transitionSet.addAll(eventos.values());");
          _builder.newLine();
          _builder.append("automata = new Automaton(transitionSet, inicial, estadosFinales);");
          _builder.newLine();
          _builder.append("automata.initializeAutomaton();");
          _builder.newLine();
          String _name_18 = declaracion.getName();
          _builder.append(_name_18, "");
          _builder.append(" = automata;");
          _builder.newLineIfNotEmpty();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    final JvmOperation method = this._jvmTypesBuilder.toMethod(declaracion, "inicialize", _typeRef, _function);
    return method;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Model) {
      _infer((Model)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
